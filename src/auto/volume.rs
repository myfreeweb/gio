// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Drive;
use File;
use Icon;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Volume(Object<ffi::GVolume, ffi::GVolumeIface>);

    match fn {
        get_type => || ffi::g_volume_get_type(),
    }
}

pub trait VolumeExt {
    fn can_eject(&self) -> bool;

    fn can_mount(&self) -> bool;

    //#[deprecated]
    //fn eject<'a, 'b, P: Into<Option<&'a Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, cancellable: P, callback: Q, user_data: R);

    //fn eject_with_operation<'a, 'b, 'c, P: Into<Option<&'a MountOperation>>, Q: Into<Option<&'b Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S);

    fn enumerate_identifiers(&self) -> Vec<String>;

    fn get_activation_root(&self) -> Option<File>;

    fn get_drive(&self) -> Option<Drive>;

    fn get_icon(&self) -> Option<Icon>;

    fn get_identifier(&self, kind: &str) -> Option<String>;

    //fn get_mount(&self) -> /*Ignored*/Option<Mount>;

    fn get_name(&self) -> Option<String>;

    fn get_sort_key(&self) -> Option<String>;

    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn get_symbolic_icon(&self) -> Option<Icon>;

    fn get_uuid(&self) -> Option<String>;

    //fn mount<'a, 'b, 'c, P: Into<Option<&'a MountOperation>>, Q: Into<Option<&'b Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountMountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S);

    fn should_automount(&self) -> bool;

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_removed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Volume> + IsA<glib::object::Object>> VolumeExt for O {
    fn can_eject(&self) -> bool {
        unsafe {
            from_glib(ffi::g_volume_can_eject(self.to_glib_none().0))
        }
    }

    fn can_mount(&self) -> bool {
        unsafe {
            from_glib(ffi::g_volume_can_mount(self.to_glib_none().0))
        }
    }

    //fn eject<'a, 'b, P: Into<Option<&'a Cancellable>>, Q: Into<Option<&'b /*Unimplemented*/AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::g_volume_eject() }
    //}

    //fn eject_with_operation<'a, 'b, 'c, P: Into<Option<&'a MountOperation>>, Q: Into<Option<&'b Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountUnmountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_volume_eject_with_operation() }
    //}

    fn enumerate_identifiers(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::g_volume_enumerate_identifiers(self.to_glib_none().0))
        }
    }

    fn get_activation_root(&self) -> Option<File> {
        unsafe {
            from_glib_full(ffi::g_volume_get_activation_root(self.to_glib_none().0))
        }
    }

    fn get_drive(&self) -> Option<Drive> {
        unsafe {
            from_glib_full(ffi::g_volume_get_drive(self.to_glib_none().0))
        }
    }

    fn get_icon(&self) -> Option<Icon> {
        unsafe {
            from_glib_full(ffi::g_volume_get_icon(self.to_glib_none().0))
        }
    }

    fn get_identifier(&self, kind: &str) -> Option<String> {
        unsafe {
            from_glib_full(ffi::g_volume_get_identifier(self.to_glib_none().0, kind.to_glib_none().0))
        }
    }

    //fn get_mount(&self) -> /*Ignored*/Option<Mount> {
    //    unsafe { TODO: call ffi::g_volume_get_mount() }
    //}

    fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::g_volume_get_name(self.to_glib_none().0))
        }
    }

    fn get_sort_key(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_volume_get_sort_key(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_34", feature = "dox"))]
    fn get_symbolic_icon(&self) -> Option<Icon> {
        unsafe {
            from_glib_full(ffi::g_volume_get_symbolic_icon(self.to_glib_none().0))
        }
    }

    fn get_uuid(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::g_volume_get_uuid(self.to_glib_none().0))
        }
    }

    //fn mount<'a, 'b, 'c, P: Into<Option<&'a MountOperation>>, Q: Into<Option<&'b Cancellable>>, R: Into<Option<&'c /*Unimplemented*/AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, flags: /*Ignored*/MountMountFlags, mount_operation: P, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::g_volume_mount() }
    //}

    fn should_automount(&self) -> bool {
        unsafe {
            from_glib(ffi::g_volume_should_automount(self.to_glib_none().0))
        }
    }

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "changed",
                transmute(changed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_removed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "removed",
                transmute(removed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn changed_trampoline<P>(this: *mut ffi::GVolume, f: glib_ffi::gpointer)
where P: IsA<Volume> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Volume::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn removed_trampoline<P>(this: *mut ffi::GVolume, f: glib_ffi::gpointer)
where P: IsA<Volume> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Volume::from_glib_borrow(this).downcast_unchecked())
}
